# -*- mode: python; -*-

#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

Import('OpEnv')

env = OpEnv.Clone()

local_sources = [
                 'uveserver_test.py',
                 'analytics_systest.py',
                 ]
local_sources_rules = []
for file in local_sources:
    local_sources_rules.append(env.Install('.', '#controller/src/opserver/test/' + file))
local_sources_rules.append(env.Install('', '#controller/src/opserver/test/setup.py'))

local_dirs = ['utils']
local_dirs_rules = []
for dir in local_dirs:
    files = Glob('#controller/src/opserver/test/' + dir + '/*.py')  
    local_dirs_rules.append(env.Install(dir, files))    
          
generator_sandesh_files = env.SandeshGenPy('#controller/src/vnsw/agent/uve/virtual_machine.sandesh') 
generator_sandesh_files += env.SandeshGenPy('#controller/src/sandesh/common/flow.sandesh')
generator_sandesh_files += env.SandeshGenPy('#controller/src/vnsw/agent/uve/port_bmap.sandesh')

generator_sandesh_dirs = ['virtual_machine', 'flow']
generator_sandesh_srcs = ['gen_py/' + src for src in generator_sandesh_dirs]
generator_sandesh_rules = []
for file in generator_sandesh_srcs:
    generator_sandesh_rules.append(env.Install('sandesh', file))

generator_inc_dirs = ['port_bmap'] 
generator_inc_srcs = ['gen_py/' + src for src in generator_inc_dirs]
for file in generator_inc_srcs:
    generator_sandesh_rules.append(env.Install('opserver', file))

env.Depends(generator_sandesh_rules, generator_sandesh_files)
env.Depends(local_sources_rules, [generator_sandesh_rules, local_dirs_rules])

venv = env.setup_venv('analytics_test', 'analytics_test')
#maintain the order
pip_pkgs = ['greenlet==0.4.1', 'gevent==0.13.8', 'eventlet==0.9.17',
        'testtools==0.9.21', 'fixtures==0.3.12', 'requests==1.1.0',
        'lxml==2.3.3', 'geventhttpclient==1.0a', 'prettytable==0.7.2',
        'psutil==0.4.1',
            'thrift==0.8.0',
            'redis==2.7.1',
            'xmltodict==0.2',
        Dir(env['TOP']).abspath + '/opserver/dist/opserver-0.1dev.tar.gz']

build_pkgs = [
    '#controller/src/analytics/test/utils/mockcassandra',
    '#controller/src/analytics/test/utils/mockredis',
    '#tools/sandesh/library/python',
    '#controller/src/opserver/test']

env.Depends(venv, '#controller/src/analytics')
env.Depends(venv, '#controller/src/sandesh')
env.Depends(venv, '#controller/src/opserver')

pip_commands = []
pip_commands.append(
    env.venv_add_pip_pkg(venv, pip_pkgs))
pip_commands.append(
    env.venv_add_pip_pkg(venv, ['pycassa==1.7.1']))
env.Depends(pip_commands[1], pip_commands[0])

_deps = []
_deps += pip_commands
_deps += env.venv_add_build_pkg(venv,
                                map(lambda x: Dir(x).abspath, build_pkgs))

test = env.PyTestSuite('opserver-test', local_sources, venv)
for d in _deps:
    env.Depends(test, d)

env.Alias('src/opserver:test', test)
